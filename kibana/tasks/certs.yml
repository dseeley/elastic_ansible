---

- block:
    - name: certs | Generate RSA private key
      community.crypto.openssl_privatekey_pipe:
      register: r__openssl_privatekey_pipe
      no_log: true

    - name: certs | Generate CSR
      community.crypto.openssl_csr_pipe:
        privatekey_content: "{{r__openssl_privatekey_pipe.privatekey}}"
        key_usage: ["digitalSignature", "keyCertSign", "keyEncipherment"]
        key_usage_critical: yes
        extended_key_usage: ["clientAuth", "serverAuth"]
        extended_key_usage_critical: yes
        subject_ordered: [ { CN: "{{ansible_hostname}}.{{cluster_vars.dns_user_domain}}" } ]
        subject_alt_name: |-
          {% set SANs = ['DNS:' + ansible_hostname,'IP:' + ansible_default_ipv4.address] %}
          {%- if (cluster_vars.dns_user_domain is defined  and  cluster_vars.dns_user_domain != "") -%}
            {%- set _ = SANs.append('DNS:' + ansible_hostname + '.' + cluster_vars.dns_user_domain) -%}
          {%- endif -%}
          {%- if (ansible_default_ipv4.address != ansible_host) -%}
            {%- set _ = SANs.append('IP:' + ansible_host) -%}
          {%- endif -%}
          {{ SANs }}
      register: r__openssl_csr_pipe

    - name: certs | Generate the self-signed certificate
      community.crypto.x509_certificate_pipe:
        provider: ownca
        ownca_content: "{{ssl_ownca['ca-crt.pem']}}"
        ownca_privatekey_content: "{{ssl_ownca['ca-key.pem']}}"
        csr_content: "{{r__openssl_csr_pipe.csr}}"
        selfsigned_not_after: "+3652d"       # Expiry in 10 years (incl leap years)
      register: r__x509_certificate_pipe

    - name: certs | copy self-signed certs to remote
      block:
        - name: certs | create cert directory on remote
          file: path={{kibana_ssl_path}} state=directory owner={{kibana_user}} group={{kibana_group}}

        - name: certs | Copy SSL certificates to remote
          copy:
            content: "{{ item.val }}"
            dest: "{{ item.path }}"
            mode:  "{{ item.mode }}"
            owner: "{{kibana_user}}"
            group: "{{kibana_group}}"
            force: "{{ 'yes' if recreate_certs is defined and recreate_certs|bool else 'no' }}"
          no_log: true
          with_items:
            - { path: '{{kibana_ssl_ca_path}}', val: "{{ssl_ownca['ca-crt.pem']}}", mode: '0644'}
            - { path: '{{kibana_ssl_crt_path}}', val: "{{r__x509_certificate_pipe.certificate}}", mode: '0644'}
            - { path: '{{kibana_ssl_key_path}}', val: "{{r__openssl_privatekey_pipe.privatekey}}", mode: '0600'}
      become: yes
      notify: restart kibana
  when: kibana_ssl_is_self_signed|bool


- name: certs | copy real certs to remote
  block:
    - name: certs | create cert directory on remote
      file: path={{kibana_ssl_path}} state=directory owner={{kibana_user}} group={{kibana_group}}

    - name: certs | Copy SSL certificates to remote
      copy:
        content: "{{ item.val }}"
        dest: "{{ item.path }}"
        mode:  "{{ item.mode }}"
        owner: "{{kibana_user}}"
        group: "{{kibana_group}}"
        force: "{{ 'yes' if recreate_certs is defined and recreate_certs|bool else 'no' }}"
      no_log: true
      with_items:
        - { path: '{{kibana_ssl_crt_path}}', val: "{{kibana_ssl_crt_content}}", mode: '0644'}
        - { path: '{{kibana_ssl_key_path}}', val: "{{kibana_ssl_key_content}}", mode: '0600'}
  become: yes
  notify: restart kibana
  when: (kibana_ssl_is_self_signed is not defined  or  kibana_ssl_is_self_signed|bool==false) and (kibana_ssl_crt_content is defined and kibana_ssl_crt_content != "")
